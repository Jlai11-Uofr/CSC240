{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3063: DtypeWarning: Columns (2,3,5) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "\n",
    "df3= pd.read_csv(\"/Users/jonathanlai/Downloads/CorrectFinalMaskOff.csv\")\n",
    "df4 = pd.read_csv('/Users/jonathanlai/PycharmProjects/Introtopytorch/WeekendData.csv')\n",
    "import matplotlib as plt\n",
    "from matplotlib import pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['May03', 'May02', 'May01', 'Apr24', 'Apr25', 'Apr26', 'Apr27',\n",
       "       'Apr18', 'Apr19', 'Apr17'], dtype=object)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.date.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['GreaterEuropean,WestEuropean,Germanic' 'GreaterAfrican,Africans'\n",
      " 'GreaterEuropean,British' 'GreaterEuropean,WestEuropean,Hispanic'\n",
      " 'GreaterEuropean,EastEuropean' 'Asian,IndianSubContinent'\n",
      " 'GreaterEuropean,Jewish' 'GreaterEuropean,WestEuropean,French'\n",
      " 'GreaterEuropean,WestEuropean,Nordic' 'Asian,GreaterEastAsian,EastAsian'\n",
      " 'Asian,GreaterEastAsian,Japanese' 'GreaterEuropean,WestEuropean,Italian'\n",
      " 'GreaterAfrican,Muslim']\n"
     ]
    }
   ],
   "source": [
    "Unqiue_date= df3['date'].unique()\n",
    "\n",
    "Gender = df3['gender'].dropna().unique()\n",
    "\n",
    "Age = df3['age'].dropna().unique()\n",
    "\n",
    "Race = df3['race'].dropna().unique()\n",
    "\n",
    "\n",
    "print(Race)\n",
    "\n",
    "DataFrameDate = {elem : df3 for elem in Unqiue_date}\n",
    "\n",
    "Gender1  = {elem : df3 for elem in Gender}\n",
    "\n",
    "Age1 = {elem : df3 for elem in Age}\n",
    "\n",
    "\n",
    "Race1 = {elem : df3 for elem in Race}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Sep():\n",
    "    for key in DataFrameDate.keys():\n",
    "            DataFrameDate[key] = df3[:][df3.date == key]\n",
    "    for key in Gender1.keys():\n",
    "            Gender1[key] = df3[:][df3.gender == key]\n",
    "    for key in Age1.keys():\n",
    "            Age1[key] = df3[:][df3.age == key]\n",
    "    for key in Race1.keys():\n",
    "            Race1[key] = df3[:][df3.race == key]\n",
    "        \n",
    "Sep()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.016011988759351625\n",
      "0.012452136217568788\n",
      "0.018465317865429095\n",
      "-0.012976206678535373\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(np.mean(Age1['<=18'].score))\n",
    "print(np.mean((Age1['19-29'].score)))\n",
    "print(np.mean(Age1[\"30-39\"].score))\n",
    "print(np.mean(Age1['>40'].score))\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.06811999999999994\n",
      "-0.06291451612903226\n",
      "-0.013888636363636365\n",
      "0.026755357142857168\n",
      "-0.027195652173913027\n",
      "0.1855483333333334\n",
      "0.08548095238095238\n",
      "-0.16544888888888887\n",
      "-0.1182777777777777\n",
      "0.11300909090909092\n",
      "-0.03701276595744681\n",
      "-0.1748227272727272\n",
      "0.03582307692307696\n",
      "0.13340727272727274\n",
      "0.07154042553191489\n",
      "0.07838529411764707\n",
      "0.07032580645161289\n",
      "0.2304387096774194\n",
      "0.34406000000000014\n",
      "0.050556521739130444\n",
      "0.04630263157894736\n",
      "0.09658048780487802\n",
      "0.07919333333333332\n",
      "0.001538297872340431\n",
      "0.035739622641509435\n",
      "0.10291639344262296\n",
      "0.14234098360655734\n",
      "0.16186615384615388\n",
      "0.04038723404255318\n",
      "-0.05952352941176471\n",
      "0.030701265822784814\n",
      "0.004122641509433943\n",
      "-0.04121639344262295\n",
      "0.007179310344827598\n",
      "-0.013673584905660386\n",
      "-0.030492727272727258\n",
      "0.010236170212765948\n",
      "0.0228148148148148\n",
      "-0.06346969696969697\n",
      "0.11590263157894737\n",
      "0.052151515151515136\n",
      "0.06382916666666666\n",
      "0.2738808510638297\n",
      "0.1245457142857143\n",
      "0.13796800000000004\n",
      "0.164877358490566\n",
      "-0.0014666666666666636\n",
      "-0.0098390243902439\n",
      "0.0937294117647059\n",
      "-0.09410363636363639\n",
      "-0.06792686567164177\n",
      "-0.00920952380952381\n",
      "-0.18948870967741926\n",
      "0.04816382978723404\n",
      "-0.08990298507462685\n",
      "-0.20547173913043473\n",
      "-0.10222000000000002\n",
      "0.04776086956521737\n",
      "-0.015232432432432432\n",
      "0.033588636363636355\n",
      "-0.047316216216216206\n",
      "-0.08416326530612245\n",
      "-0.06720606060606066\n",
      "0.14208333333333328\n",
      "0.12717073170731708\n",
      "0.08002105263157895\n",
      "0.06215000000000002\n",
      "0.11715\n",
      "-0.00791428571428572\n",
      "0.11658392857142862\n",
      "0.46549054054054007\n",
      "0.40031538461538435\n",
      "0.21037115384615387\n",
      "0.11690943396226412\n",
      "0.03916326530612242\n",
      "0.148365\n",
      "0.18927500000000005\n",
      "0.04879555555555556\n",
      "0.11413437500000001\n",
      "0.17720000000000002\n",
      "0.16155882352941184\n",
      "0.09043823529411767\n",
      "-0.05090285714285713\n",
      "0.3425833333333334\n",
      "-0.07122857142857145\n",
      "0.08973913043478259\n",
      "-0.031072499999999992\n",
      "0.04426590909090911\n",
      "-0.11752307692307692\n",
      "-0.08553243243243243\n",
      "0.05326874999999999\n",
      "0.013226470588235307\n",
      "-0.10173235294117644\n",
      "-0.111985\n",
      "-0.0057022222222222335\n",
      "-0.12883461538461538\n",
      "0.02405999999999999\n",
      "0.12113846153846151\n",
      "0.13825925925925925\n",
      "0.12340555555555557\n",
      "-0.0426611111111111\n",
      "0.09221724137931032\n",
      "0.18318333333333336\n",
      "0.1138272727272727\n",
      "-0.15237142857142855\n",
      "0.021582758620689643\n",
      "0.09699666666666668\n",
      "0.19447777777777775\n",
      "-0.08359705882352941\n",
      "-0.1613444444444444\n",
      "-0.12161333333333331\n",
      "0.012687179487179474\n",
      "0.053057142857142865\n",
      "0.12757692307692306\n",
      "0.045569767441860455\n",
      "0.09086666666666665\n",
      "-0.037089130434782625\n",
      "0.03073235294117649\n",
      "0.17985999999999996\n",
      "0.06946363636363635\n",
      "0.07005833333333335\n",
      "-0.11544374999999998\n",
      "-0.08379\n",
      "-0.26229555555555556\n",
      "-0.0542468085106383\n",
      "-0.24437441860465114\n",
      "-0.13445744680851063\n",
      "-0.23125769230769228\n",
      "0.010195454545454537\n",
      "-0.068376\n",
      "-0.18665357142857136\n",
      "0.09702857142857144\n",
      "-0.13325862068965516\n",
      "-0.04037083333333332\n",
      "0.09930833333333333\n",
      "0.15755000000000002\n",
      "-0.17984827586206897\n",
      "-0.03529024390243902\n",
      "-0.11977115384615386\n",
      "-0.004126415094339601\n",
      "0.0354551724137931\n",
      "0.1573241379310345\n",
      "0.09726842105263159\n",
      "0.141144\n",
      "0.48476000000000014\n",
      "0.20352093023255824\n",
      "0.26320937499999997\n",
      "0.12902307692307688\n",
      "0.19132258064516133\n",
      "0.11491176470588238\n",
      "0.009667391304347819\n",
      "-0.03755445544554454\n",
      "-0.08786543209876548\n",
      "-0.12388630136986303\n",
      "-0.028718644067796617\n",
      "0.029306249999999992\n",
      "-0.11530545454545456\n",
      "-0.07561284403669724\n",
      "-0.10117647058823526\n",
      "-0.17871844660194175\n",
      "-0.19041395348837212\n",
      "-0.0003444444444444392\n",
      "-0.16998481012658231\n",
      "-0.14107042253521127\n",
      "-0.112685\n",
      "-0.07956296296296299\n",
      "-0.07215374999999999\n",
      "-0.008214999999999981\n",
      "-0.04678674698795181\n",
      "-0.073072\n",
      "-0.16218000000000007\n",
      "-0.11913188405797102\n",
      "-0.1870424242424244\n",
      "-0.20870128205128216\n",
      "-0.13975571428571426\n",
      "-0.17636875000000002\n",
      "-0.2962884615384616\n",
      "-0.13646363636363637\n",
      "-0.033171000000000006\n",
      "-0.133056338028169\n",
      "-0.08535833333333331\n",
      "-0.16922142857142855\n",
      "-0.09128909090909089\n",
      "-0.11564603174603172\n",
      "-0.12900600000000004\n",
      "-0.12535185185185183\n",
      "-0.09822325581395347\n",
      "-0.10584571428571429\n",
      "0.039786206896551726\n",
      "-0.09260263157894735\n",
      "-0.2577875\n",
      "-0.24478235294117648\n",
      "-0.3082794871794871\n",
      "-0.04760142857142859\n",
      "0.07084375000000002\n",
      "0.11436923076923075\n",
      "0.20276024096385534\n",
      "0.015362857142857143\n",
      "-0.1989781818181819\n",
      "-0.08890224719101121\n",
      "-0.03116310679611651\n",
      "-0.001689655172413809\n",
      "-0.054934999999999984\n",
      "0.014413043478260867\n",
      "-0.02261764705882354\n",
      "0.13177241379310345\n",
      "0.03902394366197183\n",
      "0.14415833333333333\n",
      "-0.04749740259740258\n",
      "-0.11551911764705876\n",
      "-0.14793333333333333\n",
      "-0.041931481481481465\n",
      "-0.04014047619047619\n",
      "-0.029323684210526328\n",
      "-0.03051000000000001\n",
      "0.17065476190476195\n",
      "-0.02419\n",
      "-0.01599756097560976\n",
      "0.13371929824561404\n",
      "-0.043125\n",
      "-0.01593442622950818\n",
      "0.04030810810810809\n",
      "0.03292391304347827\n",
      "0.10797000000000001\n",
      "0.06591929824561403\n",
      "-0.12015510204081635\n",
      "0.04524655172413796\n",
      "0.07125000000000001\n",
      "0.05946615384615384\n",
      "0.04114838709677421\n",
      "0.140419298245614\n",
      "0.021718181818181814\n",
      "-0.008262499999999997\n",
      "0.05997906976744187\n",
      "-0.02179791666666664\n",
      "-0.1542149253731344\n",
      "0.012607547169811321\n",
      "-0.10117169811320754\n",
      "0.11651600000000002\n",
      "0.08647460317460318\n",
      "-0.02335781249999999\n",
      "0.37622000000000005\n",
      "0.16385932203389839\n",
      "0.13985625000000004\n",
      "0.23631739130434787\n",
      "0.1347322580645161\n",
      "0.10997804878048785\n",
      "0.32629222222222243\n",
      "0.20935833333333354\n",
      "0.15767560975609762\n",
      "0.2790885245901639\n",
      "-0.14730833333333335\n",
      "0.11553150684931508\n",
      "0.18083833333333338\n",
      "0.2052933333333334\n",
      "-0.0973181818181818\n",
      "-0.006256451612903202\n",
      "-0.08095714285714284\n",
      "-0.14133797468354428\n",
      "-0.21138734177215185\n",
      "-0.03651874999999999\n",
      "-0.04366705882352942\n",
      "-0.17606999999999998\n",
      "-0.04490253164556961\n",
      "-0.042138372093023256\n",
      "-0.1973298507462686\n",
      "-0.054208988764044924\n",
      "-0.11566973684210524\n",
      "-0.10034857142857143\n",
      "-0.053023529411764705\n",
      "-0.032048148148148145\n",
      "-0.002831343283582073\n",
      "0.01046065573770492\n",
      "-0.003091304347826093\n",
      "0.0513838709677419\n",
      "-0.15597941176470578\n",
      "-0.014687323943661972\n",
      "-0.07465119047619047\n",
      "-0.08889193548387099\n",
      "0.040248148148148116\n",
      "-0.049369696969696966\n",
      "0.008949999999999993\n",
      "-0.033790350877192975\n",
      "-0.03996666666666666\n",
      "-0.08866808510638301\n",
      "-0.15179642857142858\n",
      "-0.007859047619047623\n",
      "-0.025450757575757602\n",
      "0.05739687499999999\n",
      "-0.07992499999999998\n",
      "0.06373684210526316\n",
      "-0.02093888888888889\n",
      "-0.03159863013698631\n",
      "-0.14638888888888893\n",
      "-0.05678947368421055\n",
      "-0.041838823529411776\n",
      "-0.020164788732394363\n",
      "0.023638554216867468\n",
      "0.16946075949367087\n",
      "0.017740579710144935\n",
      "0.08506\n",
      "0.0026152173913043253\n",
      "-0.1028225806451613\n",
      "0.006617999999999992\n",
      "0.05590943396226418\n",
      "-0.007437288135593221\n",
      "0.08526666666666667\n",
      "0.1376622950819672\n",
      "0.08942295081967214\n",
      "-0.05145\n",
      "0.05121025641025642\n",
      "0.0630637931034483\n",
      "-0.049029729729729715\n",
      "-0.06991951219512195\n",
      "0.04602558139534884\n",
      "0.002097297297297297\n",
      "-0.08506382978723406\n",
      "0.05234647887323945\n",
      "0.02001458333333332\n",
      "-0.05440181818181816\n",
      "0.017761403508771922\n",
      "-0.14141609195402305\n",
      "-0.2897229885057472\n",
      "-0.3171271428571429\n",
      "-0.21710857142857146\n",
      "-0.04448813559322035\n",
      "-0.31119814814814817\n",
      "-0.2708688311688311\n",
      "-0.2974728571428572\n",
      "-0.19855555555555554\n",
      "-0.034529487179487214\n",
      "-0.009798809523809524\n",
      "-0.060639062500000035\n",
      "-0.0357987654320988\n",
      "-0.11229565217391307\n",
      "-0.0047819999999999885\n",
      "-0.1571228070175439\n",
      "-0.08611764705882353\n",
      "-0.00016610169491524534\n",
      "-0.1233262295081968\n",
      "-0.13028974358974357\n",
      "-0.14189275362318846\n",
      "-0.04043728813559323\n",
      "0.02708833333333334\n",
      "0.020555813953488374\n",
      "-0.02578684210526316\n",
      "0.011880769230769224\n",
      "0.09722708333333331\n",
      "-0.06163513513513516\n",
      "0.02943617021276597\n",
      "0.07134262295081967\n",
      "-0.0070324324324324335\n",
      "0.04737368421052632\n",
      "0.04834117647058822\n",
      "0.25370000000000004\n",
      "0.056055932203389836\n",
      "0.21672888888888883\n",
      "0.04057692307692309\n",
      "0.18701951219512197\n",
      "-0.03140196078431375\n",
      "0.18475483870967738\n",
      "0.14186666666666664\n",
      "0.02803823529411764\n",
      "-0.024837500000000012\n",
      "0.23607894736842103\n",
      "-0.06804081632653063\n",
      "-0.038452941176470586\n",
      "0.10949285714285717\n",
      "0.13761249999999997\n",
      "-0.058622222222222214\n",
      "0.0652269230769231\n",
      "0.11526326530612246\n",
      "0.0772\n",
      "0.15701454545454538\n",
      "0.08478387096774202\n",
      "0.11817636363636363\n",
      "-0.09594358974358974\n",
      "0.08963\n",
      "0.03959111111111112\n",
      "0.042728571428571435\n",
      "0.07119714285714285\n",
      "0.1465245901639344\n",
      "0.21273548387096777\n",
      "0.1091156862745098\n",
      "-0.003792857142857122\n",
      "0.043143137254901966\n",
      "-0.0492050847457627\n",
      "0.1286\n",
      "0.04590555555555555\n",
      "0.14569807692307693\n",
      "0.37090217391304353\n",
      "0.20753541666666667\n",
      "0.028742\n",
      "0.2587542857142858\n",
      "0.19420645161290315\n",
      "0.2667111111111111\n",
      "0.13413389830508476\n",
      "0.24768166666666672\n",
      "0.21094285714285718\n",
      "0.31833265306122444\n",
      "0.20987045454545453\n",
      "0.11984901960784314\n",
      "0.08684657534246575\n",
      "0.17013913043478257\n",
      "0.20798260869565222\n",
      "-0.02207777777777778\n",
      "0.0828\n",
      "-0.01870285714285714\n",
      "0.1449666666666667\n",
      "0.04055454545454548\n",
      "0.020960000000000013\n",
      "0.11074117647058822\n",
      "0.18867499999999998\n",
      "0.17933387096774198\n",
      "0.18314999999999998\n",
      "-0.0022033898305084633\n",
      "-0.06045942028985506\n",
      "0.01563529411764706\n",
      "0.24372\n",
      "0.10451217391304345\n",
      "0.06340485436893203\n",
      "0.0025558139534883617\n",
      "0.11590555555555561\n",
      "0.06569876543209875\n",
      "-0.021135593220338943\n",
      "0.10098431372549022\n",
      "0.044740298507462695\n",
      "0.06735999999999993\n",
      "0.1857963414634145\n",
      "0.10154594594594592\n",
      "0.11768679245283019\n",
      "0.05605000000000001\n",
      "0.1102271186440678\n",
      "0.13605238095238098\n",
      "0.1568125\n",
      "0.11126607142857141\n",
      "0.15995000000000004\n",
      "0.035302857142857136\n",
      "0.05311555555555557\n",
      "0.14978409090909092\n",
      "0.22836315789473688\n",
      "-0.030600000000000006\n",
      "0.06793913043478265\n",
      "0.011766666666666661\n",
      "0.0354189189189189\n",
      "0.13312871287128702\n",
      "0.24122254901960782\n",
      "0.12775999999999996\n",
      "0.17752209302325575\n",
      "0.10523380281690131\n",
      "0.0707686567164179\n",
      "0.13220925925925922\n",
      "0.04206363636363635\n",
      "0.04614736842105264\n",
      "0.039906896551724164\n",
      "0.19638431372549026\n",
      "0.12195964912280705\n",
      "-0.06713409090909092\n",
      "0.18380263157894733\n",
      "0.10235000000000002\n",
      "-0.07069375\n",
      "0.09073478260869561\n",
      "0.0426861111111111\n",
      "-0.027164864864864857\n",
      "-0.07230967741935486\n",
      "0.15551162790697676\n",
      "-0.037944000000000006\n",
      "0.07040208333333332\n",
      "0.02801538461538461\n",
      "0.07169250000000002\n",
      "0.12935882352941175\n",
      "0.07998378378378376\n",
      "0.10805208333333333\n",
      "-0.17019310344827587\n",
      "-0.02299285714285715\n",
      "0.01721081081081079\n",
      "-0.18174411764705886\n",
      "-0.013481818181818185\n",
      "0.0312720930232558\n",
      "0.0942766666666667\n",
      "-0.02211111111111111\n",
      "-0.22759999999999997\n",
      "-0.17317714285714284\n",
      "-0.11394583333333332\n",
      "0.08114615384615383\n",
      "0.04196428571428571\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a44286650>"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = pd.DataFrame(columns=listy,index=flat_list)\n",
    "df1 = pd.DataFrame(columns=listy,index=flat_list)\n",
    "df2 = pd.DataFrame(columns=listy,index=flat_list)\n",
    "df3 =  pd.DataFrame(columns=listy,index=flat_list)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "for item in flat_list:\n",
    "    \n",
    "    for time in listy:\n",
    "        \n",
    "        try:\n",
    "            \n",
    "                Base = New[item].get_group(time) \n",
    "                Young =Base[Base['age'] == \"<=18\"]\n",
    "\n",
    "               \n",
    "                Middle = Base[Base['age'] == \"19-29\"]\n",
    "                \n",
    "                Middle1 = Base[Base['age'] == \"30-39\"]\n",
    "                \n",
    "                \n",
    "                Old = Base[Base['age'] == \">40\"]\n",
    "                    \n",
    "\n",
    "                x = np.mean(Young.score)\n",
    "                print(x)\n",
    "                y = np.mean(Middle.score)\n",
    "                z = np.mean(Middle1.score)\n",
    "                a = np.mean(Old.score)\n",
    "                #print(x,y)\n",
    "                df1.loc[item,time] = x\n",
    "                \n",
    "                df2.loc[item,time] = y\n",
    "                \n",
    "                df3.loc[item,time] = z\n",
    "                \n",
    "                df.loc[item,time] =a \n",
    "                \n",
    "              \n",
    "               \n",
    "        except Exception as e:\n",
    "           \n",
    "            pass\n",
    "            \n",
    "\n",
    "\n",
    "\n",
    "     \n",
    "\n",
    "\n",
    "Filled = df.fillna(0)\n",
    "Filled= Filled.transpose()\n",
    "sns.heatmap(Filled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a3602db90>"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Filled = df1.fillna(0)\n",
    "Filled= Filled.transpose()\n",
    "sns.heatmap(Filled)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a34179110>"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Filled = df3.fillna(0)\n",
    "Filled= Filled.transpose()\n",
    "sns.heatmap(Filled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2ef25810>"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Filled = df2.fillna(0)\n",
    "Filled= Filled.transpose()\n",
    "sns.heatmap(Filled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "New = {elem : df3 for elem in Unqiue_date}\n",
    "\n",
    "for item in DataFrameDate.keys():\n",
    "     x= DataFrameDate[item].sort_values(by='time',ascending=True)\n",
    "     \n",
    "     times = pd.DatetimeIndex(x.time)\n",
    "     grouped = x.groupby([times.hour])\n",
    "     New[item] = grouped\n",
    "     \n",
    "#New['Apr08'].get_group(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##Create some boxplots\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.api as sm\n",
    "from statsmodels.formula.api import ols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['Apr03', 'Apr04', 'Apr05', nan, 'Apr08', 'Apr09', 'Mar26', 'Mar27', 'Apr02', 'Apr01', 'Mar23', 'Mar24', 'Mar29', 'Apr07', 'Mar25', 'Mar30', 'Mar31', 'Apr06', 'Mar22', 'Mar28', 'Apr12', 'Apr11', 'Apr13', 'Apr10'])"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#DataFrameDate[float('NaN')]\n",
    "DataFrameDate.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Apr03', 'Apr04', 'Apr05', 'Apr08', 'Apr09', 'Mar26', 'Mar27', 'Apr02', 'Apr01', 'Mar23', 'Mar24', 'Mar29', 'Apr07', 'Mar25', 'Mar30', 'Mar31', 'Apr06', 'Mar22', 'Mar28', 'Apr12', 'Apr11', 'Apr13', 'Apr10']\n",
      "['Mar22', 'Mar23', 'Mar24', 'Mar25', 'Mar26', 'Mar27', 'Mar28', 'Mar29', 'Mar30', 'Mar31', 'Apr01', 'Apr02', 'Apr03', 'Apr04', 'Apr05', 'Apr06', 'Apr07', 'Apr08', 'Apr09', 'Apr10', 'Apr11', 'Apr12', 'Apr13']\n"
     ]
    }
   ],
   "source": [
    "lista = []\n",
    "listb = []\n",
    "listc = []\n",
    "listx = list(df3.date.unique())\n",
    "listx = [x for x in listx if str(x) != 'nan']\n",
    "\n",
    "\n",
    "print(listx)\n",
    "for x in range(0,len(listx)):\n",
    "   \n",
    "    if ('Mar') in listx[x]:\n",
    "       \n",
    "      lista.append(listx[x])\n",
    "    else:\n",
    "        listb.append(listx[x])\n",
    "listy = list(New[\"Apr11\"].groups.keys())\n",
    "lista.sort()\n",
    "listb.sort()\n",
    "listc.append(lista)\n",
    "listc.append(listb)\n",
    "\n",
    "flat_list = [item for sublist in listc for item in sublist]\n",
    "print(flat_list)\n",
    "\n",
    "listx.sort()\n",
    "\n",
    "listy.sort()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a4427ead0>"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "new_Frame = pd.DataFrame(columns=listy,index=flat_list)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "for item in flat_list:\n",
    "    for time in listy:\n",
    "        try:\n",
    "            \n",
    "            x = np.mean(New[item].get_group(time).score)\n",
    "               \n",
    "            new_Frame.loc[item,time] = x\n",
    "           # print(new_Frame.loc[item,time])\n",
    "        except:\n",
    "           \n",
    "            pass\n",
    "Filled = new_Frame.fillna(0)\n",
    "Filled= Filled.transpose()\n",
    "sns.heatmap(Filled)\n",
    "\n",
    "\n",
    "#Total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>Unnamed: 0.1.1</th>\n",
       "      <th>Tweet_id</th>\n",
       "      <th>name</th>\n",
       "      <th>id</th>\n",
       "      <th>location</th>\n",
       "      <th>text</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>date</th>\n",
       "      <th>time</th>\n",
       "      <th>race</th>\n",
       "      <th>score</th>\n",
       "      <th>screen_name</th>\n",
       "      <th>Unnamed: 0.1.1.1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1245987058272948200</td>\n",
       "      <td>Alvytana Mavua</td>\n",
       "      <td>78564346</td>\n",
       "      <td>Nairobi</td>\n",
       "      <td>AT_USER The first and most important is to rap...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>19-29</td>\n",
       "      <td>Male</td>\n",
       "      <td>Apr03</td>\n",
       "      <td>08:10:38</td>\n",
       "      <td>GreaterAfrican,Africans</td>\n",
       "      <td>0.1513</td>\n",
       "      <td>Mavua</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1245941329651269600</td>\n",
       "      <td>killmonger'son</td>\n",
       "      <td>839285340955426821</td>\n",
       "      <td>Tembisa, South Africa</td>\n",
       "      <td>This is horrific. Two French doctors on live t...</td>\n",
       "      <td>Negative</td>\n",
       "      <td>&gt;40</td>\n",
       "      <td>Male</td>\n",
       "      <td>Apr03</td>\n",
       "      <td>05:08:56</td>\n",
       "      <td>GreaterEuropean,British</td>\n",
       "      <td>-0.5892</td>\n",
       "      <td>sizwe11121</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1246037533382914000</td>\n",
       "      <td>Pedro Goncalves</td>\n",
       "      <td>117716541</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>Aircraft carriers, navy ships, military bases ...</td>\n",
       "      <td>Negative</td>\n",
       "      <td>19-29</td>\n",
       "      <td>Male</td>\n",
       "      <td>Apr03</td>\n",
       "      <td>11:31:12</td>\n",
       "      <td>GreaterEuropean,WestEuropean,Hispanic</td>\n",
       "      <td>-0.5463</td>\n",
       "      <td>SlowGoncalves</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>1246158643612938200</td>\n",
       "      <td>HR_dancer</td>\n",
       "      <td>4429732393</td>\n",
       "      <td>NY, USA</td>\n",
       "      <td>Taiwan to donate 10 million masks to countries...</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>19-29</td>\n",
       "      <td>Male</td>\n",
       "      <td>Apr03</td>\n",
       "      <td>19:32:27</td>\n",
       "      <td>GreaterEuropean,EastEuropean</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>JFisk20</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>1246140771721453600</td>\n",
       "      <td>Tim Thrash</td>\n",
       "      <td>452535195</td>\n",
       "      <td>Austin Texas</td>\n",
       "      <td>I'm being contacted by multiple employees at e...</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>&gt;40</td>\n",
       "      <td>Male</td>\n",
       "      <td>Apr03</td>\n",
       "      <td>18:21:26</td>\n",
       "      <td>Asian,IndianSubContinent</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>TimThrash</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243988</th>\n",
       "      <td>228239</td>\n",
       "      <td>40164</td>\n",
       "      <td>40164</td>\n",
       "      <td>1248195582134333400</td>\n",
       "      <td>Pritesh #StayHomeSaveLife 🇮🇳</td>\n",
       "      <td>88380827</td>\n",
       "      <td>WorldWide</td>\n",
       "      <td>India joined a global rush to buy medical supp...</td>\n",
       "      <td>Negative</td>\n",
       "      <td>&gt;40</td>\n",
       "      <td>Male</td>\n",
       "      <td>Apr09</td>\n",
       "      <td>10:26:31</td>\n",
       "      <td>GreaterEuropean,British</td>\n",
       "      <td>-0.0516</td>\n",
       "      <td>prathod2008</td>\n",
       "      <td>40164.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243989</th>\n",
       "      <td>228240</td>\n",
       "      <td>40165</td>\n",
       "      <td>40165</td>\n",
       "      <td>1248425442467438600</td>\n",
       "      <td>Epidemiology+Virology Experts. Fighting COVID-19</td>\n",
       "      <td>1240995101234434050</td>\n",
       "      <td>NaN</td>\n",
       "      <td>😷To Mask or Not to Mask? A PSA from some of th...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>&gt;40</td>\n",
       "      <td>Male</td>\n",
       "      <td>Apr10</td>\n",
       "      <td>01:39:54</td>\n",
       "      <td>GreaterEuropean,EastEuropean</td>\n",
       "      <td>0.7856</td>\n",
       "      <td>EpiD18329833</td>\n",
       "      <td>40165.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243990</th>\n",
       "      <td>228241</td>\n",
       "      <td>40166</td>\n",
       "      <td>40166</td>\n",
       "      <td>1248127685940908000</td>\n",
       "      <td>Bayla ☘ 🇨🇦 🇮🇱 ⚽️</td>\n",
       "      <td>54701448</td>\n",
       "      <td>Montreal..Canada</td>\n",
       "      <td>A nurse told me she was taken from her regular...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>19-29</td>\n",
       "      <td>Male</td>\n",
       "      <td>Apr09</td>\n",
       "      <td>05:56:44</td>\n",
       "      <td>GreaterEuropean,British</td>\n",
       "      <td>0.5086</td>\n",
       "      <td>Marquess8</td>\n",
       "      <td>40166.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243991</th>\n",
       "      <td>228242</td>\n",
       "      <td>40167</td>\n",
       "      <td>40167</td>\n",
       "      <td>1248283084749000700</td>\n",
       "      <td>Michael Means #ORPUW</td>\n",
       "      <td>1436790152</td>\n",
       "      <td>Ames, IA</td>\n",
       "      <td>Whiskey company CEO battles price-gouging on N...</td>\n",
       "      <td>Negative</td>\n",
       "      <td>&gt;40</td>\n",
       "      <td>Male</td>\n",
       "      <td>Apr09</td>\n",
       "      <td>16:14:14</td>\n",
       "      <td>GreaterEuropean,Jewish</td>\n",
       "      <td>-0.3818</td>\n",
       "      <td>michaelmeans49</td>\n",
       "      <td>40167.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243993</th>\n",
       "      <td>228244</td>\n",
       "      <td>40169</td>\n",
       "      <td>40169</td>\n",
       "      <td>1248156457092042800</td>\n",
       "      <td>Kaspar</td>\n",
       "      <td>47080758</td>\n",
       "      <td>Amsterdam, The Netherlands</td>\n",
       "      <td>AT_USER AT_USER AT_USER AT_USER AT_USER From T...</td>\n",
       "      <td>Positive</td>\n",
       "      <td>19-29</td>\n",
       "      <td>Male</td>\n",
       "      <td>Apr09</td>\n",
       "      <td>07:51:03</td>\n",
       "      <td>Asian,IndianSubContinent</td>\n",
       "      <td>0.2960</td>\n",
       "      <td>Kaspar_NL</td>\n",
       "      <td>40169.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>143525 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Unnamed: 0  Unnamed: 0.1 Unnamed: 0.1.1             Tweet_id  \\\n",
       "2                2             2              2  1245987058272948200   \n",
       "3                3             3              3  1245941329651269600   \n",
       "4                4             4              4  1246037533382914000   \n",
       "7                7             7              7  1246158643612938200   \n",
       "8                8             8              8  1246140771721453600   \n",
       "...            ...           ...            ...                  ...   \n",
       "243988      228239         40164          40164  1248195582134333400   \n",
       "243989      228240         40165          40165  1248425442467438600   \n",
       "243990      228241         40166          40166  1248127685940908000   \n",
       "243991      228242         40167          40167  1248283084749000700   \n",
       "243993      228244         40169          40169  1248156457092042800   \n",
       "\n",
       "                                                    name                   id  \\\n",
       "2                                         Alvytana Mavua             78564346   \n",
       "3                                         killmonger'son   839285340955426821   \n",
       "4                                        Pedro Goncalves            117716541   \n",
       "7                                              HR_dancer           4429732393   \n",
       "8                                             Tim Thrash            452535195   \n",
       "...                                                  ...                  ...   \n",
       "243988                      Pritesh #StayHomeSaveLife 🇮🇳             88380827   \n",
       "243989  Epidemiology+Virology Experts. Fighting COVID-19  1240995101234434050   \n",
       "243990                                  Bayla ☘ 🇨🇦 🇮🇱 ⚽️             54701448   \n",
       "243991                              Michael Means #ORPUW           1436790152   \n",
       "243993                                            Kaspar             47080758   \n",
       "\n",
       "                          location  \\\n",
       "2                          Nairobi   \n",
       "3            Tembisa, South Africa   \n",
       "4                   United Kingdom   \n",
       "7                          NY, USA   \n",
       "8                     Austin Texas   \n",
       "...                            ...   \n",
       "243988                   WorldWide   \n",
       "243989                         NaN   \n",
       "243990            Montreal..Canada   \n",
       "243991                    Ames, IA   \n",
       "243993  Amsterdam, The Netherlands   \n",
       "\n",
       "                                                     text sentiment    age  \\\n",
       "2       AT_USER The first and most important is to rap...  Positive  19-29   \n",
       "3       This is horrific. Two French doctors on live t...  Negative    >40   \n",
       "4       Aircraft carriers, navy ships, military bases ...  Negative  19-29   \n",
       "7       Taiwan to donate 10 million masks to countries...   Neutral  19-29   \n",
       "8       I'm being contacted by multiple employees at e...   Neutral    >40   \n",
       "...                                                   ...       ...    ...   \n",
       "243988  India joined a global rush to buy medical supp...  Negative    >40   \n",
       "243989  😷To Mask or Not to Mask? A PSA from some of th...  Positive    >40   \n",
       "243990  A nurse told me she was taken from her regular...  Positive  19-29   \n",
       "243991  Whiskey company CEO battles price-gouging on N...  Negative    >40   \n",
       "243993  AT_USER AT_USER AT_USER AT_USER AT_USER From T...  Positive  19-29   \n",
       "\n",
       "       gender   date      time                                   race   score  \\\n",
       "2        Male  Apr03  08:10:38                GreaterAfrican,Africans  0.1513   \n",
       "3        Male  Apr03  05:08:56                GreaterEuropean,British -0.5892   \n",
       "4        Male  Apr03  11:31:12  GreaterEuropean,WestEuropean,Hispanic -0.5463   \n",
       "7        Male  Apr03  19:32:27           GreaterEuropean,EastEuropean  0.0000   \n",
       "8        Male  Apr03  18:21:26               Asian,IndianSubContinent  0.0000   \n",
       "...       ...    ...       ...                                    ...     ...   \n",
       "243988   Male  Apr09  10:26:31                GreaterEuropean,British -0.0516   \n",
       "243989   Male  Apr10  01:39:54           GreaterEuropean,EastEuropean  0.7856   \n",
       "243990   Male  Apr09  05:56:44                GreaterEuropean,British  0.5086   \n",
       "243991   Male  Apr09  16:14:14                 GreaterEuropean,Jewish -0.3818   \n",
       "243993   Male  Apr09  07:51:03               Asian,IndianSubContinent  0.2960   \n",
       "\n",
       "           screen_name  Unnamed: 0.1.1.1  \n",
       "2                Mavua               NaN  \n",
       "3           sizwe11121               NaN  \n",
       "4        SlowGoncalves               NaN  \n",
       "7              JFisk20               NaN  \n",
       "8            TimThrash               NaN  \n",
       "...                ...               ...  \n",
       "243988     prathod2008           40164.0  \n",
       "243989    EpiD18329833           40165.0  \n",
       "243990       Marquess8           40166.0  \n",
       "243991  michaelmeans49           40167.0  \n",
       "243993       Kaspar_NL           40169.0  \n",
       "\n",
       "[143525 rows x 17 columns]"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Male =New[\"Mar22\"].get_group(4)\n",
    "Male1=Male[Male['gender'] == \"Male\"]\n",
    "\n",
    "Gender1[\"Male\"]\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a Heatmap for Female vs Male:\n",
    "Gender1['Male']\n",
    "Gender1[\"Female\"]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "new_frame2 = pd.DataFrame(columns=listy,index=flat_list)\n",
    "\n",
    "new_Frame1 = pd.DataFrame(columns=listy,index=flat_list)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "for item in flat_list:\n",
    "    \n",
    "    for time in listy:\n",
    "        \n",
    "        try:\n",
    "            \n",
    "                Male = New[item].get_group(time) \n",
    "                Male1 =Male[Male['gender'] == \"Male\"]\n",
    "\n",
    "                Female = New[item].get_group(time) \n",
    "                Female1 = Female[Female['gender'] == \"Female\"]\n",
    "\n",
    "                x = np.mean(Female1.score)\n",
    "                y = np.mean(Male1.score)\n",
    "                #print(x,y)\n",
    "                new_Frame1.loc[item,time] = x\n",
    "                \n",
    "                new_frame2.loc[item,time] = y\n",
    "               \n",
    "        except Exception as e:\n",
    "           \n",
    "            pass\n",
    "            \n",
    "\n",
    "\n",
    "\n",
    "     \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_Frame1\n",
    "\n",
    "\n",
    "bye = new_Frame1.fillna(0)\n",
    "bye = bye.transpose()\n",
    "sns.heatmap(bye)\n",
    "    \n",
    "##FEmale Heatmap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hi =  new_frame2.fillna(0)\n",
    "hi = hi.transpose()\n",
    "sns.heatmap(hi)\n",
    "\n",
    "\n",
    "#male Heatmap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.XTick at 0x1a4426e3d0>,\n",
       "  <matplotlib.axis.XTick at 0x1a442a0710>,\n",
       "  <matplotlib.axis.XTick at 0x1a2e879690>,\n",
       "  <matplotlib.axis.XTick at 0x1a442c5e10>,\n",
       "  <matplotlib.axis.XTick at 0x1a44285410>,\n",
       "  <matplotlib.axis.XTick at 0x1a44285dd0>,\n",
       "  <matplotlib.axis.XTick at 0x1a442ad1d0>,\n",
       "  <matplotlib.axis.XTick at 0x1a442adad0>,\n",
       "  <matplotlib.axis.XTick at 0x1a442add50>,\n",
       "  <matplotlib.axis.XTick at 0x1a442ccdd0>,\n",
       "  <matplotlib.axis.XTick at 0x1a442ad6d0>,\n",
       "  <matplotlib.axis.XTick at 0x1a442c53d0>,\n",
       "  <matplotlib.axis.XTick at 0x1a442cca50>,\n",
       "  <matplotlib.axis.XTick at 0x1a4428db50>,\n",
       "  <matplotlib.axis.XTick at 0x1a4428d610>,\n",
       "  <matplotlib.axis.XTick at 0x1a4428d950>,\n",
       "  <matplotlib.axis.XTick at 0x1a44288f50>,\n",
       "  <matplotlib.axis.XTick at 0x1a442889d0>,\n",
       "  <matplotlib.axis.XTick at 0x1a442a5050>,\n",
       "  <matplotlib.axis.XTick at 0x1a4428d290>,\n",
       "  <matplotlib.axis.XTick at 0x1a4428ded0>,\n",
       "  <matplotlib.axis.XTick at 0x1a442a5cd0>,\n",
       "  <matplotlib.axis.XTick at 0x1a442a5510>],\n",
       " <a list of 23 Text xticklabel objects>)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Male = Gender1[\"Male\"]\n",
    "Female = Gender1[\"Female\"]\n",
    "\n",
    "Malelist = []\n",
    "Femalelist = []\n",
    "Overall = []\n",
    "\n",
    "for item in flat_list:\n",
    "\n",
    "    x = Male[Male['date'] ==item]\n",
    "    y = Female[Female['date'] ==item]\n",
    "    z = DataFrameDate[item]\n",
    "    Malelist.append(np.mean(x.score))\n",
    "    Femalelist.append(np.mean(y.score))\n",
    "    Overall.append(np.mean(z.score))\n",
    "    \n",
    "    \n",
    "plt.scatter(flat_list,Malelist)\n",
    "plt.scatter(flat_list,Femalelist)\n",
    "\n",
    "\n",
    "\n",
    "plt.plot(flat_list,Malelist)\n",
    "plt.plot(flat_list,Femalelist)\n",
    "plt.plot(flat_list,Overall)\n",
    "x = list(range(0,len(flat_list)))\n",
    "plt.xticks(x, flat_list, rotation='vertical')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "haha = pd.to_datetime(DataFrameDate[\"Mar23\"].time)\n",
    "\n",
    "DataFrameDate[\"Mar23\"].time\n",
    "\n",
    "df3 = DataFrameDate[\"Mar23\"].sort_values(by='time',ascending=True)\n",
    "\n",
    "\n",
    "S = pd.to_datetime(df3.time)\n",
    "times = pd.DatetimeIndex(df3.time)\n",
    "grouped = df3.groupby([times.hour])\n",
    "\n",
    "for name, group in grouped:\n",
    "    print(name)\n",
    "    \n",
    "grouped.get_group(4).score\n",
    "\n",
    "\n",
    "\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "print(DataFrameDate.keys())\n",
    "for item in DataFrameDate.keys():\n",
    "   # print(DataFrameDate[item].date)\n",
    "    print(np.mean(DataFrameDate[item].score))\n",
    "    #print((DataFrameDate[item].score.describe()))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(DataFrameDate['Apr12'].score\n",
    "print(DataFrameDate['Apr11'].describe())\n",
    "print(DataFrameDate['Apr10'].describe())\n",
    "print(DataFrameDate['Apr13'].describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = []\n",
    "\n",
    "x.append(df['date'].unique())\n",
    "x.append(df['sentiment'])\n",
    "uniform_data = np.random.rand(10, 12)\n",
    "df1 = df.pivot(index='date',columns='time',values='score')\n",
    "sns.heatmap(df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['sentiment'].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = [\"hi\",\"abc\",\"gg\"]\n",
    "gg = [1,2,\"Sring\"]\n",
    "g = [1,7,99]\n",
    "listy = []\n",
    "#listy.append(y)\n",
    "listy.append(g)\n",
    "listy.append(gg)\n",
    "sns.heatmap(listy)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install twint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import twint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configure\n",
    "c = twint.Config()\n",
    "c.Username = \"now\"\n",
    "c.Search = \"fruit\"\n",
    "\n",
    "# Run\n",
    "#twint.run.Search(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "twint.run.Search(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "scipy.stats.ranksums(Gender1[\"Male\"].score,Gender1[\"Female\"].score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.mean(df3.score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.mean(Gender1[\"Female\"].score)\n",
    "print(len(Gender1[\"Male\"]))\n",
    "print(len(Gender1[\"Female\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n",
    "analyzer = SentimentIntensityAnalyzer()\n",
    "\n",
    "sentence = \"I am so not HAPPY!\"\n",
    "vs = analyzer.polarity_scores(sentence)\n",
    "print(\"{:-<65} {}\".format(sentence, str(vs)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "matrix = pd.read_csv(\"/Users/jonathanlai/Downloads/trainingandtestdata/testdata.manual.2009.06.14.csv\")\n",
    "\n",
    "Labels = matrix['4']\n",
    "#Score = score(Labels)\n",
    "\n",
    "\n",
    "\n",
    "Train_txt = matrix[\"@stellargirl I loooooooovvvvvveee my Kindle2. Not that the DX is cool, but the 2 is fantastic in its own right.\"]\n",
    "Label= _processTweet(Train_txt)\n",
    "\n",
    "plt.matshow()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "analyser = SentimentIntensityAnalyzer()\n",
    "def _processTweet(tweets):\n",
    "    label = []\n",
    "    for tweet in tweets:\n",
    "        spell = SpellChecker()\n",
    "        tweet = re.sub('((www\\.[^\\s]+)|(https?://[^\\s]+))', 'URL', tweet)  # remove URLs\n",
    "        tweet = re.sub('@[^\\s]+', 'AT_USER', tweet)  # remove usernames\n",
    "        tweet = re.sub(r'#([^\\s]+)', r'\\1', tweet)  # remove the # in #hashtag\n",
    "        pattern = re.compile(r\"(.)\\1{2,}\")\n",
    "        tweet = pattern.sub(r\"\\1\\1\", tweet)\n",
    "        tweet = word_tokenize(tweet)\n",
    "\n",
    "        misspelled = spell.unknown(tweet)\n",
    "\n",
    "        for word in misspelled:\n",
    "            tweet = [spell.correction((word)) if x == word else x for x in tweet]\n",
    "        String= ''\n",
    "        for item in tweet:\n",
    "            String = String+item+\" \"\n",
    "        vs = analyser.polarity_scores(String)['compound']\n",
    "\n",
    "        if (float(vs) >= .05):\n",
    "            score = (vs)\n",
    "            sentiment = 4\n",
    "\n",
    "        elif (float(vs) <= -.05):\n",
    "            score = (vs)\n",
    "            sentiment = 0\n",
    "\n",
    "        else:\n",
    "            score = (vs)\n",
    "            sentiment = 2\n",
    "        print(String)\n",
    "        label.append(sentiment)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "       \n",
    "    return label\n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "from nltk.tokenize import word_tokenize\n",
    "from string import punctuation\n",
    "from nltk.corpus import stopwords\n",
    "from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n",
    "from spellchecker import SpellChecker\n",
    "import nltk\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def score(Data):\n",
    "    print(len(Data))\n",
    "    listp = []\n",
    "    for item in Data:\n",
    "        if (item == \"Positive\"):\n",
    "            listp.append(4)\n",
    "        elif(item == \"Negative\"):\n",
    "            listp.append(0)\n",
    "        else:\n",
    "            listp.append(2)\n",
    "    return listp\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(Labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hi = score(Labels)\n",
    "print(len(hi))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=Score[:1000]\n",
    "len(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.matshow(cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cm=accuracy_score(Labels,Label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cm = confusion_matrix(Labels,Label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "np.mean(Gender1['Male'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('/Users/jonathanlai/Downloads/CorrectFinalMaskOff.csv')\n",
    "Series = df['id']\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Series = Series.to_frame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy.stats as stats\n",
    "stats.f_oneway(Age1['<=18'].score, Age1['19-29'].score, Age1['30-39'].score, Age1['>40'].score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gg = df3[['race','score']].copy()\n",
    "\n",
    "aov = welch_anova(dv='score', between='race', data=gg)\n",
    "\n",
    "aov"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = [np.mean(Gender1['Male'].score),np.mean(Gender1['Female'].score)]\n",
    "\n",
    "y = [\"Male\",\"Female\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x,y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Age1[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = [np.mean((Age1['<=18'].score)), np.mean((Age1['19-29'].score)), np.mean((Age1['30-39'].score)), np.mean((Age1['>40'].score))]\n",
    "\n",
    "y = [\"18\",'19-29','30-39','>40']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.bar(y,x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "New_List = list(Age1['19-29'].id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Newlist1= list(Age1['<=18'].id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "yay = New_List + Newlist1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "length = len(yay)\n",
    "middle_index = length//2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "firsthalf  = yay[:middle_index]\n",
    "\n",
    "secondhalf = yay[middle_index:]\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('Fileover99999', 'w') as f:\n",
    "    for item in firsthalf:\n",
    "        f.write(\"%s\\n\" % item)\n",
    "        \n",
    "        \n",
    "with open('Hineil', 'w') as f:\n",
    "    for item in secondhalf:\n",
    "        f.write(\"%s\\n\" % item)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    " Young =Base[Base['age'] == \"<=18\"]\n",
    "\n",
    "               \n",
    "                Middle = Base[Base['age'] == \"19-29\"]\n",
    "                \n",
    "                Middle1 = Base[Base['age'] == \"30-39\"]\n",
    "                \n",
    "                \n",
    "                Old = Base[Base['age'] == \">40\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sizes = [len(Young),len(Middle),len(Middle1),len(Old)]\n",
    "L =  '<=18', '19-29' , '30-39', '>=40'\n",
    "fig1, ax1 = plt.subplots()\n",
    "ax1.pie(sizes,labels=L, autopct='%1.1f%%',\n",
    "        shadow=True, startangle=90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sizes = [len(Male1),len(Female1)]\n",
    "L = 'Male','Female'\n",
    "explode = (0,.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig1, ax1 = plt.subplots()\n",
    "ax1.pie(sizes,explode = explode,labels=L, autopct='%1.1f%%',\n",
    "        shadow=True, startangle=90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Races = type(list(Race1.keys()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "avg_sentiment = []\n",
    "count = 0\n",
    "pp = {}\n",
    "for keys in Race1.keys():\n",
    "    \n",
    "     x= np.mean(Race1[keys]['score'])\n",
    "     avg_sentiment.append(x)\n",
    "     pp[count] = keys\n",
    "     count +=1\n",
    "     \n",
    "\n",
    "pp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = list(range(len(avg_sentiment)))\n",
    "y = list(Race1.keys())\n",
    "\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.xticks(x)\n",
    "plt.bar(x,avg_sentiment)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "numbers = []\n",
    "with open('/Users/jonathanlai/Downloads/filepath.txt','r') as file:\n",
    "    for line in file.readlines():\n",
    "        numbers.append(line)\n",
    "numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "sample  = random.sample(numbers,25000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('Jonathan.txt', 'w') as f:\n",
    "    for item in sample:\n",
    "        f.write(\"%s\\n\" % item)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.016011988759351625\n",
      "0.012452136217568788\n",
      "0.018465317865429095\n",
      "-0.012976206678535373\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, '>40')"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x1 = []\n",
    "print(np.mean(Age1['<=18'].score))\n",
    "print(np.mean((Age1['19-29'].score)))\n",
    "print(np.mean(Age1[\"30-39\"].score))\n",
    "print(np.mean(Age1['>40'].score))\n",
    "\n",
    "\n",
    "df3 = Age1['>40']\n",
    "for item in flat_list: ##Flat_list is just all the dates in order\n",
    "    x = np.mean(df3[df3['date'] == item].score)\n",
    "    x1.append(x)\n",
    "x = list(range(0,len(flat_list)))\n",
    "plt.xticks(x, flat_list, rotation='vertical')\n",
    "\n",
    "\n",
    "plot = plt.bar(flat_list,x1)\n",
    "\n",
    "plot[6].set_color('r')\n",
    "plot[7].set_color('r')\n",
    "\n",
    "\n",
    "\n",
    "plot[13].set_color('r')\n",
    "plot[14].set_color('r')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "plot[20].set_color('r')\n",
    "plot[21].set_color('r')\n",
    "\n",
    "plt.title(\">40\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "hi = pd.read_csv('/Users/jonathanlai/PycharmProjects/Introtopytorch/WeekendData.csv')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.007372340624320462"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Weekends = {\"Mar28\",'Mar30','Apr04','Apr05','Apr11','Apr12'}\n",
    "All = set(flat_list)\n",
    "\n",
    "Weekdays = All-Weekends\n",
    "Weekdays\n",
    "\n",
    "W = []\n",
    "for items in Weekends:\n",
    "   W.append(np.mean(df3.loc[df3['date'] ==items].score))\n",
    "np.mean(W)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.012100399212554175"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "W = []\n",
    "for items in Weekdays:\n",
    "   W.append(np.mean(df3.loc[df3['date'] ==items].score))\n",
    "np.mean(W)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Apr12\n",
      "Apr05\n",
      "Mar28\n",
      "Apr11\n",
      "Apr04\n",
      "Mar30\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2         0.1513\n",
       "3        -0.5892\n",
       "4        -0.5463\n",
       "7         0.0000\n",
       "8         0.0000\n",
       "           ...  \n",
       "108843    0.8225\n",
       "108942   -0.6072\n",
       "108964    0.0000\n",
       "109033   -0.5892\n",
       "109039    0.0000\n",
       "Name: score, Length: 8363, dtype: float64"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3 = Gender1['Male']\n",
    "df3[df3['date'] == 'Apr03'].score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "243994\n"
     ]
    }
   ],
   "source": [
    "print(len(df3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "143525\n"
     ]
    }
   ],
   "source": [
    "print(len(Gender1['Male']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "92481\n"
     ]
    }
   ],
   "source": [
    "print(len(Gender1[\"Female\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
